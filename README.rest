.. vim: ft=rst sts=2 sw=2 tw=77

.. :Author: Roman Neuhauser
.. :Contact: neuhauser+git-pimp@sigpipe.cz
.. :Copyright: This document is in the public domain.

.. this file is marked up using reStructuredText
   lines beginning with ".." are reST directives
   "foo_" or "`foo bar`_" is a link, defined at ".. _foo" or ".. _foo bar"
   "::" introduces a literal block (usually some form of code)
   "`foo`" is some kind of identifier
   suspicious backslashes in the text ("`std::string`\s") are required for
   reST to recognize the preceding character as syntax

.. default-role:: strong
.. parsed-literal::

  `NAME`
       `git-pimp` â€” Code review or pull requests as patch email series


  `SYNOPSIS`
       `git-pimp` -h | --help
       `git-pimp` [--to ADDR]... [--cc ADDR]... [-r N] [-n] [-o DIR] BASE HEAD


  `DESCRIPTION`
       `git-pimp` generates a series of MIME messages from a range of
       commits denoted by `(BASE, HEAD]`, with a cover letter summarizing
       the range.  `git-pimp` lets the user edit the cover letter, then
       submits all messages to *git-mailz(1)*.

   `Options`
     `--cc ADDR`
        Include `ADDR` in the `Cc:` header of generated messages.
        Overrides the `pimp.cc` configuration value.

     `-n` Exit before invoking *git-mailz(1)*, preserve generated messages.

     `-o DIR`, `--output DIR`
          Write files to `DIR` instead of default `$PWD`.

     `-r N`
        Mark the series as the `N`-th reroll of the patch series.
        Generated filenames have `vN` prepended, and the subject tag has
        " vN" appended.

     `--to ADDR`
        Include `ADDR` in the `To:` header of generated messages.
        Overrides the `pimp.to` configuration value.

   `Configuration`
     [pimp]
       to = ADDR
       cc = ADDR
       editor = EXE
       output = DIR
       subjecttag = TAG

     `pimp.cc`
          See `--cc`.

     `pimp.editor`
          `EXE` is run with all messages as arguments before they're handed
          over to `git-mailz`.  If `pimp.editor` is empty, `git-pimp` falls
          back to `$VISUAL` and `$EDITOR`, in this order.  If all three are
          empty, `git-pimp` aborts.  If `EXE` exits >0, `git-pimp` aborts.

     `pimp.output`
          See `--output`.

     `pimp.subjecttag`
          Prefix essage subjects with `[TAG]`.

     `pimp.to`
          See `--to`.

  `ENVIRONMENT`
    `EDITOR`, `VISUAL`
      Defaults for the `pimp.editor` configuration setting.

    `GIT_PIMP_CHATTY`, `GIT_PIMP_DRYRUN`
      Development and testing aids.

    `git-pimp` may be influenced by environment variables used by
    the programs listed in `SEE ALSO`, possibly others.

  `FILES`
    `git-pimp` uses *git-config(1)* to retrieve configuration settings.

  `EXIT STATUS`
       The `git-pimp` utility exits 0 on success, and >0 if an error occurs.

  `SEE ALSO`
       *git(1)*, *git-format-patch(1)*, *git-mailz(1)*, *git-mantle(1)*,
       *zsh(1)*.

  `LICENSE`
       MIT
           https://github.com/roman-neuhauser/git-pimp/blob/master/LICENSE

  `AUTHORS`
       Roman Neuhauser <neuhauser+git-pimp@sigpipe.cz>
           https://github.com/roman-neuhauser/git-pimp/

  `BUGS`
       No doubt plentiful.  Please report them at
           https://github.com/roman-neuhauser/git-pimp/issues
